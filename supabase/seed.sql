
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE FUNCTION "public"."increment_today_message_count"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$begin
  insert into public.daily_message_analysis(room, date, message_count)
  values(new.room, current_date, 1) 
  on conflict (room, date)
  do
    update set message_count = excluded.message_count + 1;
  return null;
end;$$;

ALTER FUNCTION "public"."increment_today_message_count"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."chat_messages" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "room" "text" NOT NULL,
    "author" "text" DEFAULT ("auth"."jwt"() ->> 'wallet_address'::"text") NOT NULL,
    "message" "text",
    "message_type" smallint DEFAULT '0'::smallint NOT NULL,
    "rich" "json",
    CONSTRAINT "chat_messages_message_check" CHECK (("length"("message") > 0))
);

ALTER TABLE "public"."chat_messages" OWNER TO "postgres";

ALTER TABLE "public"."chat_messages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chat_messages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."daily_message_analysis" (
    "room" "text" NOT NULL,
    "date" "date" NOT NULL,
    "message_count" integer NOT NULL
);

ALTER TABLE "public"."daily_message_analysis" OWNER TO "postgres";

CREATE TABLE "public"."favorite_rooms" (
    "wallet_address" "text" DEFAULT ("auth"."jwt"() ->> 'wallet_address'::"text") NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "rooms" "text"[] DEFAULT '{}'::"text"[] NOT NULL
);

ALTER TABLE "public"."favorite_rooms" OWNER TO "postgres";

CREATE TABLE "public"."nft_collections" (
    "chain" "text" NOT NULL,
    "address" "text" NOT NULL,
    "metadata" "json" DEFAULT '{}'::"json" NOT NULL,
    "editors" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."nft_collections" OWNER TO "postgres";

CREATE TABLE "public"."nonce" (
    "id" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "nonce" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."nonce" OWNER TO "postgres";

CREATE TABLE "public"."room_profiles" (
    "wallet_address" "text" DEFAULT ("auth"."jwt"() ->> 'wallet_address'::"text") NOT NULL,
    "room" "text" NOT NULL,
    "pfp" "json",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."room_profiles" OWNER TO "postgres";

CREATE TABLE "public"."user_details" (
    "wallet_address" "text" DEFAULT ("auth"."jwt"() ->> 'wallet_address'::"text") NOT NULL,
    "ens" "text",
    "pfp" "json",
    "introduction" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "ens_updated_at" timestamp with time zone,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."user_details" OWNER TO "postgres";

CREATE TABLE "public"."user_nft_ownership" (
    "wallet_address" "text" NOT NULL,
    "nft" "text" NOT NULL,
    "owned" boolean NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."user_nft_ownership" OWNER TO "postgres";

ALTER TABLE ONLY "public"."chat_messages"
    ADD CONSTRAINT "chat_messages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."daily_message_analysis"
    ADD CONSTRAINT "daily_message_analysis_pkey" PRIMARY KEY ("room", "date");

ALTER TABLE ONLY "public"."favorite_rooms"
    ADD CONSTRAINT "favorite_rooms_pkey" PRIMARY KEY ("wallet_address");

ALTER TABLE ONLY "public"."nft_collections"
    ADD CONSTRAINT "nft_collections_pkey" PRIMARY KEY ("chain", "address");

ALTER TABLE ONLY "public"."nonce"
    ADD CONSTRAINT "nonce_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."room_profiles"
    ADD CONSTRAINT "room_profiles_pkey" PRIMARY KEY ("wallet_address", "room");

ALTER TABLE ONLY "public"."user_details"
    ADD CONSTRAINT "user_details_pkey" PRIMARY KEY ("wallet_address");

ALTER TABLE ONLY "public"."user_nft_ownership"
    ADD CONSTRAINT "user_nft_ownership_pkey" PRIMARY KEY ("wallet_address", "nft");

CREATE TRIGGER "increment_today_message_count" AFTER INSERT ON "public"."chat_messages" FOR EACH ROW EXECUTE FUNCTION "public"."increment_today_message_count"();

CREATE POLICY "allow all to owner" ON "public"."favorite_rooms" USING ((("auth"."jwt"() ->> 'wallet_address'::"text") = "wallet_address")) WITH CHECK ((("auth"."jwt"() ->> 'wallet_address'::"text") = "wallet_address"));

CREATE POLICY "allow anon access" ON "public"."chat_messages" FOR SELECT USING (true);

CREATE POLICY "allow anon select" ON "public"."user_nft_ownership" FOR SELECT USING (true);

CREATE POLICY "anon select" ON "public"."room_profiles" FOR SELECT USING (true);

CREATE POLICY "anon select" ON "public"."user_details" FOR SELECT USING (true);

ALTER TABLE "public"."chat_messages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."daily_message_analysis" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."favorite_rooms" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "insert" ON "public"."user_details" FOR INSERT WITH CHECK ((("ens" = NULL::"text") AND ("json_typeof"("pfp") = 'null'::"text") AND (("auth"."jwt"() ->> 'wallet_address'::"text") = "wallet_address")));

CREATE POLICY "new message" ON "public"."chat_messages" FOR INSERT WITH CHECK (((("length"("message") > 0) OR ("json_typeof"("rich") <> 'null'::"text")) AND (("auth"."jwt"() ->> 'wallet_address'::"text") = "author") AND ((NOT (POSITION((':'::"text") IN ("room")) > 0)) OR (( SELECT "user_nft_ownership"."owned"
   FROM "public"."user_nft_ownership"
  WHERE (("user_nft_ownership"."wallet_address" = ("auth"."jwt"() ->> 'wallet_address'::"text")) AND ("user_nft_ownership"."nft" = "chat_messages"."room"))
 LIMIT 1) = true))));

ALTER TABLE "public"."nft_collections" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."nonce" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."room_profiles" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "update" ON "public"."user_details" FOR UPDATE USING ((("ens" = NULL::"text") AND ("json_typeof"("pfp") = 'null'::"text") AND (("auth"."jwt"() ->> 'wallet_address'::"text") = "wallet_address"))) WITH CHECK ((("ens" = NULL::"text") AND ("json_typeof"("pfp") = 'null'::"text") AND (("auth"."jwt"() ->> 'wallet_address'::"text") = "wallet_address")));

ALTER TABLE "public"."user_details" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_nft_ownership" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."increment_today_message_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."increment_today_message_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_today_message_count"() TO "service_role";

GRANT ALL ON TABLE "public"."chat_messages" TO "anon";
GRANT ALL ON TABLE "public"."chat_messages" TO "authenticated";
GRANT ALL ON TABLE "public"."chat_messages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chat_messages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."daily_message_analysis" TO "anon";
GRANT ALL ON TABLE "public"."daily_message_analysis" TO "authenticated";
GRANT ALL ON TABLE "public"."daily_message_analysis" TO "service_role";

GRANT ALL ON TABLE "public"."favorite_rooms" TO "anon";
GRANT ALL ON TABLE "public"."favorite_rooms" TO "authenticated";
GRANT ALL ON TABLE "public"."favorite_rooms" TO "service_role";

GRANT ALL ON TABLE "public"."nft_collections" TO "anon";
GRANT ALL ON TABLE "public"."nft_collections" TO "authenticated";
GRANT ALL ON TABLE "public"."nft_collections" TO "service_role";

GRANT ALL ON TABLE "public"."nonce" TO "anon";
GRANT ALL ON TABLE "public"."nonce" TO "authenticated";
GRANT ALL ON TABLE "public"."nonce" TO "service_role";

GRANT ALL ON TABLE "public"."room_profiles" TO "anon";
GRANT ALL ON TABLE "public"."room_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."room_profiles" TO "service_role";

GRANT ALL ON TABLE "public"."user_details" TO "anon";
GRANT ALL ON TABLE "public"."user_details" TO "authenticated";
GRANT ALL ON TABLE "public"."user_details" TO "service_role";

GRANT ALL ON TABLE "public"."user_nft_ownership" TO "anon";
GRANT ALL ON TABLE "public"."user_nft_ownership" TO "authenticated";
GRANT ALL ON TABLE "public"."user_nft_ownership" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
